/*
	Name: 15_接水问题
	Copyright: 
	Author: 
	Date: 16-08-17 15:37
	Description: 15_接水问题
查看 提交 统计 提问
总时间限制: 1000ms 内存限制: 65536kB
描述
学校里有一个水房，水房里一共装有 m 个龙头可供同学们打开水，每个龙头每秒钟的供水量相等，均为 1。
现在有 n 名同学准备接水，他们的初始接水顺序已经确定。将这些同学按接水顺序从 1 到 n 编号，i号同学的接水量为 wi。
接水开始时，1 到 m 号同学各占一个水龙头，并同时打开水龙头接水。当其中某名同学 j 完成其接水量要求 wj后，
下一名排队等候接水的同学 k 马上接替 j 同学的位置开始接水。这个换人的过程是瞬间完成的，且没有任何水的浪费。
即 j 同学第 x 秒结束时完成接水，则 k 同学第 x+1 秒立刻开始接水。 若当前接水人数 n’不足 m，则只有 n’个龙头供水，其它 m-n’个龙头关闭。
现在给出 n 名同学的接水量，按照上述接水规则，问所有同学都接完水需要多少秒。
输入
第 1 行2 个整数 n 和 m，用一个空格隔开，分别表示接水人数和龙头个数。
第 2 行 n 个整数 w1、w2、……、wn，每两个整数之间用一个空格隔开，wi表示 i 号同学的接水量。
1 ≤ n ≤ 10000，1 ≤ m ≤ 100 且 m ≤ n；
1 ≤ wi ≤ 100。
输出
输出只有一行，1 个整数，表示接水所需的总时间。
样例输入
样例 #1：
5 3
4 4 1 2 1
样例 #2：
8 4
23 71 87 32 70 93 80 76
样例输出
样例 #1：
4
样例 #2：
163

提示：输入输出样例1解释：
第 1 秒，3 人接水。第 1秒结束时，1、2、3 号同学每人的已接水量为 1，3 号同学接完水，4 号同学接替 3 号同学开始接水。
第 2 秒，3 人接水。第 2 秒结束时，1、2 号同学每人的已接水量为 2，4 号同学的已接水量为 1。
第 3 秒，3 人接水。第 3 秒结束时，1、2 号同学每人的已接水量为 3，4 号同学的已接水量为 2。4号同学接完水，5 号同学接替 4 号同学开始接水。
第 4 秒，3 人接水。第 4 秒结束时，1、2 号同学每人的已接水量为 4，5 号同学的已接水量为 1。1、2、5 号同学接完水，即所有人完成接水。
总接水时间为 4 秒。

算法分析：模拟接水过程，时间每过去1秒钟，扫描一次数组，处理已经完成接水的人。 
*/
#include <iostream>

using namespace std;

const int MAXN = 10000;
const int MAXM = 100;
int A[MAXN];
int B[MAXM];

int main() 
{
	int n, m, max;
	cin >> n >> m;
	for (int i=0; i<n; i++)
		cin >> A[i];
	
	if (m >= n) //一次性搞定的情形
	{
		max = A[0];
		for (int i=1; i<n; i++)//查找当前接水者中用时最长的人 
		{
			if (max < A[i])
				max = A[i];
		}
		cout << max << endl;
		return 0;	
	} 
	
	for (int i=0; i<m; i++)//模拟过去1秒钟 
		B[i] = A[i];
	bool flag = 1;
	int s = 0, t = m;
	while (flag)
	{
		s++;
		for (int i=0; i<m; i++)//模拟过去1秒钟 
			B[i]--;
		for (int i=0; i<m; i++)//查找已经接完水的人，并且让后面的人接上 
		{
			if (B[i] == 0)
			{
				if (t < n)
				{
					B[i] = A[t++];
				}
				else //没有后继者了，跳出循环 
				{
					flag = 0;
					break;
				}
			}
		}
	}
	max = B[0];
	for (int i=1; i<m; i++)//查找当前接水者中用时最长的人 
	{
		if (max < B[i])
			max = B[i];
	}
	cout << s + max << endl;
	
	return 0;	
} 
